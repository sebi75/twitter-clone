// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String     @id @default(cuid())
  username       String
  fullName       String?
  email          String?    @unique
  emailVerified  DateTime?
  profilePicture String?
  accounts       Account[]
  sessions       Session[]
  Mentions       Mentions[]

  Tweets    Tweets[]
  Likes     Likes[]
  Retweets  Retweets[]
  Feed      Feed?
  Followers Followers[] @relation("Followers")
  Followees Followers[] @relation("Followees")
}

model Followers {
  followerId String
  followeeId String
  followers  User   @relation("Followers", fields: [followeeId], references: [id], onDelete: Cascade)
  followees  User   @relation("Followees", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followeeId, followerId])
}

model Tweets {
  id                  String       @id @default(cuid())
  userId              String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now())
  textContent         String
  isPossiblySensitive Boolean
  mediaType           String // image / video
  mediaURL            String // reference to AWS S3 bucket media storage
  parentId            String?      @unique
  child               Tweets[]     @relation("TweetsRelation")
  parent              Tweets       @relation("TweetsRelation", fields: [tweetsId], references: [id])
  user                User         @relation(fields: [userId], references: [id])
  Mentions            Mentions[]
  Hashtags            Hashtags[]
  Retweet             Retweets[]
  Likes               Likes[]
  tweetsId            String
  feedTweets          FeedTweets[]
}

model Likes {
  userId  String
  tweetId String

  user  User   @relation(fields: [userId], references: [id])
  tweet Tweets @relation(fields: [tweetId], references: [id])

  @@id([userId, tweetId])
}

model Retweets {
  userId           String
  referenceTweetId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  tweet Tweets @relation(fields: [referenceTweetId], references: [id])
  user  User   @relation(fields: [userId], references: [id])

  @@id([referenceTweetId, userId])
}

model Mentions {
  id             String @id @default(cuid())
  tweetId        String
  mentionsUserId String
  index          Int
  tweet          Tweets @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user           User   @relation(fields: [mentionsUserId], references: [id], onDelete: Cascade)
}

model Hashtags {
  id      String @id @default(cuid())
  hashtag String
  tweetId String
  tweet   Tweets @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Feed {
  id        String   @id @default(cuid())
  userId    String   @unique
  updatedAt DateTime @default(now())

  tweets FeedTweets[]
  user   User         @relation(fields: [userId], references: [id])
}

model FeedTweets {
  id      String @id @default(cuid())
  tweetId String
  feedId  String

  tweet Tweets @relation(fields: [tweetId], references: [id])
  feed  Feed   @relation(fields: [feedId], references: [id])
}
